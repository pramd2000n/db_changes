create or replace PROCEDURE XDP_P_CUST_APVL_LOGIC_VALIDATE
( 
    LOAN_REQ_ID         IN NUMBER,
    --NIC                 IN VARCHAR2,
    --RELATION            IN NUMBER,
    VALIDATION_SEQ_ID   OUT NUMBER,
    FINAL_STATUS        OUT NUMBER
) IS
/***************************************************************
* Purpose		     : To validate approval logic in origination for green channel accounts
* Author		     : Chathura Boralugoda
* Create Date	     : Thursday, Apr 16, 2020	
***************************************************************/
RELATION NUMBER := 1;
RELATION_JB NUMBER := 3;
REC_EXISTS VARCHAR2(10):= 'EXISTS';
INST_EXISTS VARCHAR2(10):= 'EXISTS';
CRIB_MAIN_EXIST NUMBER := 1;
Rowsprocessed NUMBER := 0;
var_ProcessStatusID NUMBER;
STATUS_FAIL NUMBER;
STATUS_REFER NUMBER;
STATUS_PASS NUMBER;
STATUS NUMBER;
AP_EXIST NUMBER := 1;

BEGIN

SELECT SEQ_VALIDATION_STATUS.NEXTVAL 
INTO   var_ProcessStatusID
FROM   dual;

DECLARE
var_ErrorMessage VARCHAR2(1000);
record_history  VARCHAR2(2000);
M_RULE_ID NUMBER;
M_RULE_MANDATORY VARCHAR2(10);
M_RULE_STATUS VARCHAR2(10);
M_PRODUCT_CATEGORY VARCHAR2(20);
S_RULE_NAME VARCHAR2(50);
S_RULE_NAME_DISPLAY VARCHAR2(50);
S_RULE_ID NUMBER;

C_MULTIPLE_NIC NUMBER;
C_CRIB_MAIN_ID NUMBER;
C_CRIB_MAIN_ID_NEW NUMBER;
CRIB_MAIN_EXIST_NEW NUMBER := 1;
C_CRIB_MAIN_ID_OLD NUMBER;
CRIB_MAIN_EXIST_OLD NUMBER := 1;
C_REQUEST_ID_NEW NUMBER;
C_REQUEST_ID NUMBER;
C_NIC_NO_NEW VARCHAR2(20);
C_NIC_NO_OLD VARCHAR2(20);
C_NIC_NO VARCHAR2(20);
C_NIC_NEW VARCHAR2(20);
C_NIC_OLD VARCHAR2(20);
C_CRIB_ID_NEW VARCHAR2(150);
C_CRIB_ID VARCHAR2(150);
C_VAILBLE_NEW VARCHAR2(10);
C_VAILBLE_OLD VARCHAR2(10);
C_VAILBLE VARCHAR2(10);
APPLICANT_ID NUMBER;
APPLICANT_ID_JB NUMBER;
G_GREEN_CHANNEL_ID NUMBER;
O_PRODUCT NUMBER;
O_LOANPRODUCT NUMBER;
O_HEARDFROM NUMBER;
NIC VARCHAR2(50);
NIC_JB VARCHAR2(50);
DISPO_INCOME NUMBER;
MAX_INSTALL NUMBER;
MAX_INSTALL_OLD NUMBER;
O_REQ_AMOUNT NUMBER;
TC_VALUE NUMBER;
AP_IMAIN_IND NUMBER;
AP_ISUB_IND NUMBER;
AP_IMAJOR_OCCU NUMBER; 
AP_IMINOR_OCCU NUMBER;
JB_IMAIN_IND NUMBER;
JB_ISUB_IND NUMBER;
JB_IMAJOR_OCCU NUMBER;
JB_IMINOR_OCCU NUMBER;
GROUP_RELATION VARCHAR2(100);
GROUP_RELATION_COUNT NUMBER;
SEC_ID NUMBER;
SUB_SEC_ID NUMBER;
KYC NVARCHAR2(500);
JB_KYC NVARCHAR2(500);
LOAN_REQ_AMOUNT NUMBER;
TC_REQ_AMOUNT NUMBER;
SECURITYTYPEID VARCHAR2(1000);
CATEGORYID VARCHAR2(1000);
MAINTYPEID NUMBER;
OWNERSHIPID VARCHAR2(1000);
MAKE_V VARCHAR2(1000);
MODEL_V VARCHAR2(1000);
BOND_TYPE_R VARCHAR2(1000);
PROP_TYPE_R VARCHAR2(1000);
PLAN_D_P VARCHAR2(300);
PLAN_NO_D_P VARCHAR2(300);
PLAN_D_G VARCHAR2(300);
PALN_NO_D_G VARCHAR2(300);
PLAN_D_DP VARCHAR2(300);
PALN_NO_D_DP VARCHAR2(300);

SP_CUSID NUMBER;
SP_NIC VARCHAR2(50);
SP_LMID NUMBER;
SP_APPID NUMBER;
SP_BAL NUMBER; 
SP_EXIST NUMBER := 1;

JB_EXISTS NUMBER := 1;

GR1_CUSID NUMBER;
GR1_NIC VARCHAR2(50);
GR1_LMID NUMBER;
GR1_APPID NUMBER;
GR1_DPD NUMBER := 0;
GR1_EXIST NUMBER := 1;

GR2_CUSID NUMBER;
GR2_NIC VARCHAR2(50);
GR2_LMID NUMBER;
GR2_APPID NUMBER;
GR2_DPD NUMBER := 0;
GR2_EXIST NUMBER := 1;

GR3_CUSID NUMBER;
GR3_NIC VARCHAR2(50);
GR3_LMID NUMBER;
GR3_APPID NUMBER;
GR3_DPD NUMBER := 0;
GR3_EXIST NUMBER := 1;

GR4_CUSID NUMBER;
GR4_NIC VARCHAR2(50);
GR4_LMID NUMBER;
GR4_APPID NUMBER;
GR4_DPD NUMBER := 0;
GR4_EXIST NUMBER := 1;

GR5_CUSID NUMBER;
GR5_NIC VARCHAR2(50);
GR5_LMID NUMBER;
GR5_APPID NUMBER;
GR5_DPD NUMBER := 0;
GR5_EXIST NUMBER := 1;


CURSOR get_valid_sub_rules IS
SELECT *
FROM TBL_RULE_SUB
WHERE IRULE_MASTER_ID = 17
AND VRULE_STATUS = 'ACTIVE';

 BEGIN 
    BEGIN
    SELECT IRULE_ID,VRULE_MANDATORY,VRULE_STATUS,VPRODUCT_CATEGORY
    INTO M_RULE_ID,M_RULE_MANDATORY,M_RULE_STATUS,M_PRODUCT_CATEGORY
    FROM TBL_RULE_MASTER
    WHERE VRULE_NAME ='CUST_APPROVAL_LOGIC_VALIDATE';
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        M_RULE_STATUS := 'INACTIVE';
    END;

BEGIN    
    SELECT AM.IID
    INTO APPLICANT_ID
    FROM LOAN_REQUEST LR
    INNER JOIN APPLICANT_MAIN AM ON AM.IID = LR.IAPPLICANTID
    WHERE LR.IID = LOAN_REQ_ID 
    AND LR.IPUBLISH=1
    AND AM.IPUBLISH = 1
    AND ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        AP_EXIST := 0;
    END;

 BEGIN
     SELECT COUNT(*)
     INTO C_MULTIPLE_NIC 
     FROM CRIB_MAIN 
     WHERE ILOANREQUESTID = LOAN_REQ_ID
     AND IAPPLICANTID = APPLICANT_ID
     AND IPUBLISH = 1;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
        C_MULTIPLE_NIC := 0;
     END;


   IF (C_MULTIPLE_NIC > 1) THEN

     BEGIN     
     SELECT NVL(MAX(IID),0)
     INTO C_CRIB_MAIN_ID_NEW 
     FROM (SELECT IID 
     FROM CRIB_MAIN 
     WHERE ILOANREQUESTID = LOAN_REQ_ID
     AND IAPPLICANTID = APPLICANT_ID
     AND IPUBLISH = 1
     ORDER BY IID DESC)
     WHERE ROWNUM = 1;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
        CRIB_MAIN_EXIST_NEW := 0;
     END;

     BEGIN     
     SELECT NVL(MAX(IID),0)
     INTO C_CRIB_MAIN_ID_OLD 
     FROM (SELECT IID 
     FROM CRIB_MAIN 
     WHERE ILOANREQUESTID = LOAN_REQ_ID
     AND IAPPLICANTID = APPLICANT_ID
     AND IPUBLISH = 1
     ORDER BY IID ASC)
     WHERE ROWNUM = 1;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
        CRIB_MAIN_EXIST_OLD := 0;
     END;

    BEGIN
    SELECT CH.REQUEST_ID,
           CH.NIC_NO,
           CH.CRIB_ID,
           CM.VCRIBAVAILBLE
              INTO C_REQUEST_ID_NEW,C_NIC_NO_NEW,C_CRIB_ID_NEW,C_VAILBLE_NEW
    FROM CRIB_MAIN CM
    LEFT OUTER JOIN CRIB_HEADER CH ON CH.IMAINID = CM.IID AND CH.IPUBLISH =1
    WHERE CM.IID = C_CRIB_MAIN_ID_NEW;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
         CRIB_MAIN_EXIST_NEW := 0 ;
    END;

    BEGIN
    SELECT CH.REQUEST_ID,
           CH.NIC_NO,
           CH.CRIB_ID,
           CM.VCRIBAVAILBLE
              INTO C_REQUEST_ID_NEW,C_NIC_NO_OLD,C_CRIB_ID_NEW,C_VAILBLE_OLD
    FROM CRIB_MAIN CM
    LEFT OUTER JOIN CRIB_HEADER CH ON CH.IMAINID = CM.IID AND CH.IPUBLISH =1
    WHERE CM.IID = C_CRIB_MAIN_ID_OLD;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
         CRIB_MAIN_EXIST_OLD := 0 ;
    END;
ELSE
BEGIN     
     SELECT NVL(MAX(IID),0)
     INTO C_CRIB_MAIN_ID 
     FROM (SELECT IID 
     FROM CRIB_MAIN 
     WHERE ILOANREQUESTID = LOAN_REQ_ID
     AND IAPPLICANTID = APPLICANT_ID
     AND IPUBLISH = 1
     ORDER BY IID ASC)
     WHERE ROWNUM = 1;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
        CRIB_MAIN_EXIST := 0;
     END;    

    BEGIN
    SELECT CH.REQUEST_ID,
           CH.NIC_NO,
           CH.CRIB_ID,
           CM.VCRIBAVAILBLE
    INTO C_REQUEST_ID,C_NIC_NO,C_CRIB_ID,C_VAILBLE
    FROM CRIB_MAIN CM
    LEFT OUTER JOIN CRIB_HEADER CH ON CH.IMAINID = CM.IID AND CH.IPUBLISH =1
    WHERE CM.IID = C_CRIB_MAIN_ID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        CRIB_MAIN_EXIST := 0;
    END;

   END IF;

    BEGIN
    SELECT NVL(AM.VOLDNIC,AM.VNEWNIC),AM.VOLDNIC,AM.VNEWNIC, AM.IID, 
           (SELECT T.IRENT FROM(SELECT SK.IRENT FROM TC_RETURN_SKRT SK INNER JOIN LOAN_REQUEST L ON L.ITCVAL = SK.ITCNO
            WHERE L.IID = LOAN_REQ_ID AND L.IPUBLISH=1 AND SK.IPUBLISH = 1 ORDER BY SK.IID DESC) T WHERE ROWNUM=1) AS TC_VAL, 
           (SELECT NVL(T.NMAXMONTHINSTALMENT,0) FROM(SELECT NMAXMONTHINSTALMENT FROM LOAN_SUMMARY WHERE ILOANREQUESTID = LOAN_REQ_ID 
           AND IPUBLISH = 1 ORDER BY IID DESC) T WHERE ROWNUM=1) AS MAX_INSTALL,
           AM.IMAIN_INDUSTRY, AM.ISUB_INDUSTRY, AM.IMAJOR_OCCUPATION, AM.IMINOR_OCCUPATION,
           case when LR.IPRODUCTID = 1 then LR.VGROUPRELATION else 'G' end as G_RELATION,LR.ISECTORID_LOAN,LR.ISUBSECTORID_LOAN,LR.IPRODUCTID,LP.VLOAN_CODE,LR.IHEARDFROMID,AM.VHKNOE,NVL(LRD.IREQAMOUNT,0),
            (SELECT NVL(SUM(tc.ILOCCOST),0)
             FROM TC_DETAIL tc 
             INNER JOIN LOAN_REQUEST lr ON lr.itcval = tc.itcno
             WHERE lr.IID = LOAN_REQ_ID AND lr.IPUBLISH=1 AND tc.IPUBLISH = 1) AS TC_AMOUNT,
             SI.VSECURITYTYPEID,SI.VCATEGORYID,SI.IMAINTYPEID,SI.IOWNERSHIPID,
             SD.VMAKE_V,SD.VMODEL_V,SD.VBOND_TYPE_R,SD.VPROP_TYPE_R,
             SD.VPLAN_D_P,SD.VPLAN_NO_D_P,SD.VPLAN_D_G,SD.VPALN_NO_D_G,SD.VPLAN_D_DP,SD.VPALN_NO_D_DP
    INTO NIC,C_NIC_OLD,C_NIC_NEW,APPLICANT_ID,TC_VALUE,DISPO_INCOME,
          AP_IMAIN_IND,AP_ISUB_IND,AP_IMAJOR_OCCU,AP_IMINOR_OCCU,
          GROUP_RELATION,SEC_ID,SUB_SEC_ID,O_PRODUCT,O_LOANPRODUCT,O_HEARDFROM,KYC,LOAN_REQ_AMOUNT,TC_REQ_AMOUNT,
          SECURITYTYPEID,CATEGORYID,MAINTYPEID,OWNERSHIPID,
          MAKE_V,MODEL_V,BOND_TYPE_R,PROP_TYPE_R,
          PLAN_D_P,PLAN_NO_D_P,PLAN_D_G,PALN_NO_D_G,PLAN_D_DP,PALN_NO_D_DP
    FROM LOAN_REQUEST LR
    INNER JOIN LOAN_REQUEST_DETAIL LRD ON LRD.ILOANREQUESTID = LR.IID
    INNER JOIN APPLICANT_MAIN AM ON AM.IID = LR.IAPPLICANTID
    INNER JOIN LOAN_PRODUCT LP ON LR.ILOANPRODUCTID = LP.ILOAN_PRODUCT_ID
    LEFT OUTER JOIN LOAN_SECURITY_INFO SI ON SI.ILOANREQUESTID = LR.IID AND SI.IPUBLISH = 1
    LEFT OUTER JOIN LOAN_SECURITY_TYPE_DETAILS SD ON SD.ISECURITYID = SI.IID AND SI.IPUBLISH = 1
    --LEFT OUTER JOIN TC_DETAIL TC ON TC.ITCNO = LR.ITCVAL AND TC.IPUBLISH = 1
    --LEFT OUTER JOIN APPLICANT_INC_SUMMARY AIS ON AIS.ILOANREQUESTID = LR.IID AND TC.IPUBLISH = 1
    WHERE LR.IID = LOAN_REQ_ID
    AND LR.IPUBLISH=1
    AND AM.IPUBLISH = 1
    AND LRD.IPUBLISH = 1
    AND ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        REC_EXISTS := 'NOT EXISTS';
    END;

    --GL Relation count    
    BEGIN    
    SELECT COUNT(*)
    INTO GROUP_RELATION_COUNT   
    FROM LOAN_REQUEST LR
    WHERE LR.VGROUPRELATION = GROUP_RELATION
    AND LR.IPUBLISH=1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        GROUP_RELATION_COUNT := 0;
    END;    

    --JB Details    
    BEGIN    
    SELECT NVL(AM.VOLDNIC,AM.VNEWNIC),AM.IID,AM.IMAIN_INDUSTRY,AM.ISUB_INDUSTRY,AM.IMAJOR_OCCUPATION,AM.IMINOR_OCCUPATION,AM.VHKNOE
    INTO NIC_JB,APPLICANT_ID_JB,JB_IMAIN_IND,JB_ISUB_IND,JB_IMAJOR_OCCU,JB_IMINOR_OCCU,JB_KYC    
    FROM APPLICANT_RELATION AR
    INNER JOIN APPLICANT_MAIN AM ON AM.IID = AR.IAPPLICANTID
    WHERE AR.ILOANREQUESTID = LOAN_REQ_ID 
    AND AR.IRELATIONSTATUSID = RELATION_JB
    AND AR.IPUBLISH=1
    AND AM.IPUBLISH = 1
    AND ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        JB_EXISTS := 0;
    END;    

    --guarantor 1
    BEGIN
    SELECT T2.ICUSTORMER_ID,T2.VOLDNIC,T2.ILOAN_MASTER_ID,T2.IID,T2.DPD
    INTO GR1_CUSID,GR1_NIC,GR1_LMID,GR1_APPID,GR1_DPD
        FROM(SELECT T1.ICUSTORMER_ID,T1.VOLDNIC,T1.ILOAN_MASTER_ID,T1.IID,T1.DPD
        FROM(SELECT C.ICUSTORMER_ID,AM.VOLDNIC,LM.ILOAN_MASTER_ID,AM.IID,NVL(D.IDPD,0) AS DPD
        FROM APPLICANT_RELATION AR
        INNER JOIN APPLICANT_MAIN AM ON AM.IID = AR.IAPPLICANTID
        LEFT OUTER JOIN CUSTOMER_INFO C ON C.VNIC = AM.VOLDNIC
        LEFT OUTER JOIN LOAN_MASTER LM ON LM.ICUSTORMER_ID = C.ICUSTORMER_ID
        LEFT OUTER JOIN TBL_DELINQUENCY D ON D.ILOANMASTER_ID = LM.ILOAN_MASTER_ID AND D.IACTIONED = 0 AND D.IDPD > 0
        WHERE AR.ILOANREQUESTID = LOAN_REQ_ID 
        AND AR.IRELATIONSTATUSID = 4
        AND AR.IPUBLISH=1
        AND AM.IPUBLISH = 1)T1
        ORDER BY T1.DPD DESC)T2
        WHERE ROWNUM=1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        GR1_EXIST := 0;
    END;    

    --guarantor 2
    BEGIN
    SELECT T2.ICUSTORMER_ID,T2.VOLDNIC,T2.ILOAN_MASTER_ID,T2.IID,T2.DPD
    INTO GR2_CUSID,GR2_NIC,GR2_LMID,GR2_APPID,GR2_DPD
        FROM(SELECT T1.ICUSTORMER_ID,T1.VOLDNIC,T1.ILOAN_MASTER_ID,T1.IID,T1.DPD
        FROM(SELECT C.ICUSTORMER_ID,AM.VOLDNIC,LM.ILOAN_MASTER_ID,AM.IID,NVL(D.IDPD,0) AS DPD
        FROM APPLICANT_RELATION AR
        INNER JOIN APPLICANT_MAIN AM ON AM.IID = AR.IAPPLICANTID
        LEFT OUTER JOIN CUSTOMER_INFO C ON C.VNIC = AM.VOLDNIC
        LEFT OUTER JOIN LOAN_MASTER LM ON LM.ICUSTORMER_ID = C.ICUSTORMER_ID
        LEFT OUTER JOIN TBL_DELINQUENCY D ON D.ILOANMASTER_ID = LM.ILOAN_MASTER_ID AND D.IACTIONED = 0 AND D.IDPD > 0
        WHERE AR.ILOANREQUESTID = LOAN_REQ_ID 
        AND AR.IRELATIONSTATUSID = 5
        AND AR.IPUBLISH=1
        AND AM.IPUBLISH = 1)T1
        ORDER BY T1.DPD DESC)T2
        WHERE ROWNUM=1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        GR2_EXIST := 0;
    END;   

    --guarantor 3
    BEGIN
    SELECT T2.ICUSTORMER_ID,T2.VOLDNIC,T2.ILOAN_MASTER_ID,T2.IID,T2.DPD
    INTO GR3_CUSID,GR3_NIC,GR3_LMID,GR3_APPID,GR3_DPD
        FROM(SELECT T1.ICUSTORMER_ID,T1.VOLDNIC,T1.ILOAN_MASTER_ID,T1.IID,T1.DPD
        FROM(SELECT C.ICUSTORMER_ID,AM.VOLDNIC,LM.ILOAN_MASTER_ID,AM.IID,NVL(D.IDPD,0) AS DPD
        FROM APPLICANT_RELATION AR
        INNER JOIN APPLICANT_MAIN AM ON AM.IID = AR.IAPPLICANTID
        LEFT OUTER JOIN CUSTOMER_INFO C ON C.VNIC = AM.VOLDNIC
        LEFT OUTER JOIN LOAN_MASTER LM ON LM.ICUSTORMER_ID = C.ICUSTORMER_ID
        LEFT OUTER JOIN TBL_DELINQUENCY D ON D.ILOANMASTER_ID = LM.ILOAN_MASTER_ID AND D.IACTIONED = 0 AND D.IDPD > 0
        WHERE AR.ILOANREQUESTID = LOAN_REQ_ID 
        AND AR.IRELATIONSTATUSID = 6
        AND AR.IPUBLISH=1
        AND AM.IPUBLISH = 1)T1
        ORDER BY T1.DPD DESC)T2
        WHERE ROWNUM=1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        GR3_EXIST := 0;
    END;    

    --guarantor 4
    BEGIN    
    SELECT T2.ICUSTORMER_ID,T2.VOLDNIC,T2.ILOAN_MASTER_ID,T2.IID,T2.DPD
    INTO GR4_CUSID,GR4_NIC,GR4_LMID,GR4_APPID,GR4_DPD
        FROM(SELECT T1.ICUSTORMER_ID,T1.VOLDNIC,T1.ILOAN_MASTER_ID,T1.IID,T1.DPD
        FROM(SELECT C.ICUSTORMER_ID,AM.VOLDNIC,LM.ILOAN_MASTER_ID,AM.IID,NVL(D.IDPD,0) AS DPD
        FROM APPLICANT_RELATION AR
        INNER JOIN APPLICANT_MAIN AM ON AM.IID = AR.IAPPLICANTID
        LEFT OUTER JOIN CUSTOMER_INFO C ON C.VNIC = AM.VOLDNIC
        LEFT OUTER JOIN LOAN_MASTER LM ON LM.ICUSTORMER_ID = C.ICUSTORMER_ID
        LEFT OUTER JOIN TBL_DELINQUENCY D ON D.ILOANMASTER_ID = LM.ILOAN_MASTER_ID AND D.IACTIONED = 0 AND D.IDPD > 0
        WHERE AR.ILOANREQUESTID = LOAN_REQ_ID 
        AND AR.IRELATIONSTATUSID = 7
        AND AR.IPUBLISH=1
        AND AM.IPUBLISH = 1)T1
        ORDER BY T1.DPD DESC)T2
        WHERE ROWNUM=1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        GR4_EXIST := 0;
    END;    

    --guarantor 5
    BEGIN    
    SELECT T2.ICUSTORMER_ID,T2.VOLDNIC,T2.ILOAN_MASTER_ID,T2.IID,T2.DPD
    INTO GR5_CUSID,GR5_NIC,GR5_LMID,GR5_APPID,GR5_DPD
        FROM(SELECT T1.ICUSTORMER_ID,T1.VOLDNIC,T1.ILOAN_MASTER_ID,T1.IID,T1.DPD
        FROM(SELECT C.ICUSTORMER_ID,AM.VOLDNIC,LM.ILOAN_MASTER_ID,AM.IID,NVL(D.IDPD,0) AS DPD
        FROM APPLICANT_RELATION AR
        INNER JOIN APPLICANT_MAIN AM ON AM.IID = AR.IAPPLICANTID
        LEFT OUTER JOIN CUSTOMER_INFO C ON C.VNIC = AM.VOLDNIC
        LEFT OUTER JOIN LOAN_MASTER LM ON LM.ICUSTORMER_ID = C.ICUSTORMER_ID
        LEFT OUTER JOIN TBL_DELINQUENCY D ON D.ILOANMASTER_ID = LM.ILOAN_MASTER_ID AND D.IACTIONED = 0 AND D.IDPD > 0
        WHERE AR.ILOANREQUESTID = LOAN_REQ_ID 
        AND AR.IRELATIONSTATUSID = 8
        AND AR.IPUBLISH=1
        AND AM.IPUBLISH = 1)T1
        ORDER BY T1.DPD DESC)T2
        WHERE ROWNUM=1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        GR5_EXIST := 0;
    END;        

    --Existing Loan

    BEGIN
    SELECT LRD.IREQAMOUNT,
    (SELECT ST.IRENT FROM TC_RETURN_SKRT ST WHERE   LR.ITCVAL=ST.ITCNO) AS MAX_INSTALL,
            (SELECT TRHD_INST FROM Z_TRHD T INNER JOIN LOAN_MASTER M ON T.TRHD_TC_NO=M.ITRIAL_CALCULATION_ID WHERE M.VCONTRACT_NO = LR.OLD_CONTRACT_NO 
           ) AS MAX_INSTALL_OLD, LR.IPRODUCTID,LR.GREEN_CHANNEL_ID
    INTO O_REQ_AMOUNT,MAX_INSTALL,MAX_INSTALL_OLD,O_PRODUCT,G_GREEN_CHANNEL_ID
    FROM LOAN_REQUEST LR
    INNER JOIN LOAN_REQUEST_DETAIL LRD ON LRD.ILOANREQUESTID = LR.IID
    INNER JOIN APPLICANT_MAIN AM ON AM.IID = LR.IAPPLICANTID
    LEFT OUTER JOIN ACCOUNT_ORIGINATION B ON B.IID = LR.GREEN_CHANNEL_ID
    LEFT OUTER JOIN LOAN_MASTER LM ON LM.ILOAN_MASTER_ID = B.LOAN_MASTER_ID
    WHERE LR.IID = LOAN_REQ_ID
    AND LR.IPUBLISH=1
    AND AM.IPUBLISH = 1
    AND LRD.IPUBLISH = 1
    AND ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        INST_EXISTS := 'NOT EXISTS';
    END;
	
 --APPROVAL LOGIC VALIDATIONS

 IF M_RULE_STATUS = 'ACTIVE' THEN  
  IF REC_EXISTS = 'EXISTS' THEN
    FOR valid_sub_rules IN get_valid_sub_rules
     LOOP
        S_RULE_NAME := valid_sub_rules.VRULE_SUB_NAME;
        S_RULE_ID   := valid_sub_rules.IRULE_SUB_ID;
        --Rowsprocessed := Rowsprocessed+1;

        IF S_RULE_NAME = 'DISPOSABLE_INCOME' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'DISPOSABLE_INCOME';
                IF(O_LOANPRODUCT NOT IN ( 'LS' , 'MS' , 'LU' ,'M4' , 'I3', 'I5' ) )THEN
                IF (TC_VALUE IS NOT NULL) THEN
                   IF (DISPO_INCOME > TC_VALUE) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Disposable income is greater than the trial calculation',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR25','Disposable income is less than the trial calculation',sysdate);

                   END IF;
                ELSE

                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                 VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'NOT USED',M_RULE_ID,S_RULE_ID,NULL,'ERR16','TC value is empty',sysdate);   

                END IF;
                ELSE
                    INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Disposable income is greater than the trial calculation',sysdate);
                END IF;



         ELSIF S_RULE_NAME = 'CBSL_DATA_AP' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'CBSL_DATA_APPLICANT';

                IF APPLICANT_ID IS NOT NULL THEN
                   IF (AP_IMAIN_IND IS NOT NULL AND AP_ISUB_IND IS NOT NULL AND AP_IMAJOR_OCCU IS NOT NULL AND AP_IMINOR_OCCU IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'CBSL info are available for applicant',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','CBSL info are not available for applicant',sysdate);

                   END IF;
                ELSE

                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                 VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'NOT EXISTS',M_RULE_ID,S_RULE_ID,NULL,'ERR16','Applicant info is not exists',sysdate);   

                END IF;

         ELSIF S_RULE_NAME = 'CBSL_DATA_JB' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'CBSL_DATA_JB';

                IF (O_HEARDFROM =11 OR APPLICANT_ID_JB IS NOT NULL) THEN
                   IF (JB_IMAIN_IND IS NOT NULL AND JB_ISUB_IND IS NOT NULL AND JB_IMAJOR_OCCU IS NOT NULL AND JB_IMINOR_OCCU IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'CBSL info are available for JB',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','CBSL info are not available for JB',sysdate);

                   END IF;
                ELSE

                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                 --VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'NOT EXISTS',M_RULE_ID,S_RULE_ID,NULL,'ERR16','Applicant info is not exists',sysdate); 
                 VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'NOT USED',M_RULE_ID,S_RULE_ID,NULL,NULL,'No JB exist for this loan',sysdate);

                END IF; 

         ELSIF S_RULE_NAME = 'GROUP_RELATION' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'GROUP_RELATION';

                   IF (GROUP_RELATION IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Group relation is valid',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Group relation is invalid',sysdate);

                   END IF;

             /*   
         ELSIF S_RULE_NAME = 'SECTOR_SUB_SECTOR' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'SECTOR_SUB_SECTOR';

                   IF (SEC_ID IS NOT NULL AND SUB_SEC_ID IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Sector and sub sector data is available',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Sector and sub sector data is not available',sysdate);

                   END IF;*/

         ELSIF S_RULE_NAME = 'APPLICANT_RELATION' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'APPLICANT_RELATION';

                IF O_PRODUCT = 1 THEN
                   IF (O_HEARDFROM = 11 AND JB_EXISTS = 1 AND GROUP_RELATION_COUNT = 3) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'JB exist',sysdate);

                   ELSIF (O_HEARDFROM = 2 AND JB_EXISTS = 1 AND GROUP_RELATION_COUNT = 3) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'JB exist',sysdate);

                   ELSIF (O_HEARDFROM = 2 AND JB_EXISTS = 0 AND GROUP_RELATION_COUNT = 3) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'NOT USED',M_RULE_ID,S_RULE_ID,NULL,NULL,'JB not exist',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR16','JB not exist',sysdate);

                   END IF;
                ELSE

                   IF (O_HEARDFROM = 11 AND JB_EXISTS = 1 AND (GR1_EXIST+GR2_EXIST+GR3_EXIST+GR4_EXIST+GR5_EXIST)>=2) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Valid applicant relation available',sysdate);

                   ELSIF (O_HEARDFROM = 2 AND (GR1_EXIST+GR2_EXIST+GR3_EXIST+GR4_EXIST+GR5_EXIST)>=2 ) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Valid applicant relation available',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR16','Applicant relation available is not valid',sysdate);

                   END IF;
                END IF;                   

         ELSIF S_RULE_NAME = 'KNOW_YOUR_CUSTOMER' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'KNOW_YOUR_CUSTOMER';

               IF JB_EXISTS = 1 THEN
                   IF (KYC IS NOT NULL AND JB_KYC IS NOT NULL ) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Know your customer status is valid',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Know your customer status is invalid',sysdate);

                   END IF;
                ELSE

                   IF (KYC IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Know your customer status is valid',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Know your customer status is invalid',sysdate);

                   END IF;
                END IF;
         ELSIF S_RULE_NAME = 'LOAN_AMOUNT_VS_TC_AMOUNT' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'LOAN_AMOUNT_VS_TC_AMOUNT';

                   IF (LOAN_REQ_AMOUNT = TC_REQ_AMOUNT) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Requested loan amount and tc amount is valid',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Requested loan amount and tc amount is invalid',sysdate);

                   END IF;

       ELSIF S_RULE_NAME = 'NIC_CRIB_VALIDATION' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'NIC_CRIB_VALIDATION';

        IF ((C_VAILBLE='Y' AND CRIB_MAIN_EXIST<>0) OR (C_VAILBLE_NEW='Y' AND C_VAILBLE_OLD='Y') ) THEN
                   IF (C_NIC_OLD IS NOT NULL AND C_NIC_NEW IS NOT NULL AND C_NIC_OLD= C_NIC_NO_OLD AND C_NIC_NEW = C_NIC_NO_NEW) THEN


                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib NIC and Applicant NIC is matched',sysdate);

                   ELSIF (C_NIC_OLD IS NOT NULL AND C_NIC_NEW IS  NULL AND C_NIC_OLD = C_NIC_NO ) THEN
                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib NIC and Applicant NIC is matched',sysdate);

                    ELSIF (C_NIC_OLD IS  NULL AND C_NIC_NEW IS NOT NULL AND C_NIC_NEW = C_NIC_NO ) THEN
                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib NIC and Applicant NIC is matched',sysdate);

                        ELSE
                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Crib NIC and Applicant NIC is mismatched',sysdate);

                   END IF;
         END IF;
         IF( C_VAILBLE<>'Y' OR CRIB_MAIN_EXIST=0 OR (C_NIC_OLD IS  NULL AND C_NIC_NEW IS  NULL) ) THEN
                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                 VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib info does not exists',sysdate);  
        END IF;

        IF( C_VAILBLE_NEW<>'Y' OR C_VAILBLE_OLD<>'Y' ) THEN
        IF (C_VAILBLE_NEW='Y' AND C_NIC_NEW = C_NIC_NO_NEW ) THEN
                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib NIC and Applicant NIC is matched',sysdate);
        ELSIF (C_VAILBLE_OLD='Y' AND C_NIC_OLD = C_NIC_NO_OLD ) THEN
                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                 VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib NIC and Applicant NIC is matched',sysdate);
        ELSIF (C_VAILBLE_OLD='Y' AND C_NIC_NO_OLD  IS NULL ) THEN
                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib NIC and Applicant NIC is matched',sysdate);
        ELSIF (C_VAILBLE_NEW='Y' AND C_NIC_NO_NEW  IS NULL ) THEN
                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib NIC and Applicant NIC is matched',sysdate);
        ELSIF ( C_VAILBLE_NEW<>'Y' AND C_VAILBLE_OLD<>'Y' ) THEN
       INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Crib NIC and Applicant NIC is matched',sysdate);

        ELSE
                 INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Crib NIC and Applicant NIC is mismatched',sysdate);
       END IF;
            END IF;


         ELSIF S_RULE_NAME = 'MAIN_SECURITY_SECTION' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'MAIN_SECURITY_SECTION';

                   IF (SECURITYTYPEID NOT IN ('W','V','I','M','R','T','L','D','C') OR SECURITYTYPEID IS NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Main security section details are valid 1',sysdate);

                   ELSIF (SECURITYTYPEID IN ('W','C') AND CATEGORYID IS NOT NULL AND OWNERSHIPID IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Main security section details are valid 2',sysdate);

                   ELSIF (SECURITYTYPEID IN ('V','I','M','R','T','L','D') AND CATEGORYID IS NOT NULL AND OWNERSHIPID IS NOT NULL AND MAINTYPEID IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Main security section details are valid 3',sysdate);

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Main security section details are invalid',sysdate);

                   END IF;

         ELSIF S_RULE_NAME = 'SECURITY_VEHICLE_DETAILS' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'SECURITY_VEHICLE_DETAILS';

                   IF (SECURITYTYPEID IN ('V') AND MAKE_V IS NOT NULL AND MODEL_V IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Security vehicle details are valid',sysdate);

                   ELSIF (SECURITYTYPEID IN ('V')) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Security vehicle details are invalid',sysdate);

                   END IF;

         ELSIF S_RULE_NAME = 'SECURITY_PROPERTY_MORTGAGE_DETAILS' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'SECURITY_PROPERTY_MORTGAGE_DETAILS';

                   IF (SECURITYTYPEID IN ('R') AND BOND_TYPE_R IS NOT NULL AND PROP_TYPE_R IS NOT NULL) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Security property mortgage details are valid',sysdate);

                   ELSIF (SECURITYTYPEID IN ('R')) THEN

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Security property mortgage details are invalid',sysdate);

                   END IF;
            ELSIF S_RULE_NAME = 'LOAN INSTALLMENT' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'LOAN INSTALLMENT';

                   IF (G_GREEN_CHANNEL_ID IS NOT NULL) THEN
                    IF (MAX_INSTALL <= (MAX_INSTALL_OLD*1.5)) THEN
                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,NULL,'Loan Installment is less than 150% of existing amount',sysdate);
                    ELSE
                     INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Loan Installment is greater than 150% of existing amount',sysdate);
                    END IF;

                   ELSE

                   INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                   VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,'PASS','Loan Installment is less than 150% of existing amount',sysdate);

                   END IF;
         ELSIF S_RULE_NAME = 'SECURITY_PLAN_NUMBER' THEN
                Rowsprocessed := Rowsprocessed+1;
                S_RULE_NAME_DISPLAY := 'SECURITY_PLAN_NUMBER';

                   IF (SECURITYTYPEID IN ('D') AND MAINTYPEID = 2) THEN
                        IF (PLAN_D_DP = '1' AND PALN_NO_D_DP IS NULL) THEN
                        INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                        VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,NULL,'Security plan details are invalid',sysdate);
                        ELSE
                        INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                        VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Security plan details are valid',sysdate);
                        END IF;
                   ELSIF (SECURITYTYPEID IN ('D') AND MAINTYPEID = 4) THEN
                        IF (PLAN_D_G = '1' AND PALN_NO_D_G IS NULL) THEN
                        INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                        VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,NULL,'Security plan details are invalid',sysdate);
                        ELSE
                        INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                        VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Security plan details are valid',sysdate);
                        END IF;
                   ELSIF (SECURITYTYPEID IN ('D') AND MAINTYPEID = 3) THEN
                        IF (PLAN_D_P = '1' AND PLAN_NO_D_P IS NULL) THEN
                        INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
                        VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'FAIL',M_RULE_ID,S_RULE_ID,NULL,NULL,'Security plan details are invalid',sysdate);
                        ELSE
                        INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE)
                        VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,Rowsprocessed,S_RULE_NAME_DISPLAY,'PASS',M_RULE_ID,S_RULE_ID,NULL,'ERR11','Security plan details are valid',sysdate);
                        END IF;                        
                   END IF;                   
         END IF;

        COMMIT;
     END LOOP;  
    ELSE
     INSERT INTO XDP_T_VALIDATION_STATUS(IVALIDATION_SEQ,ILOAN_ID,IAPPLICANT_ID,IRESULT_ID,VVALIDATION_TYPE,VSTATUS,IMASTER_RULE_ID,ISUB_RULE_ID,VCATEGORY,VERROR_CODE,VDESCRIPTION,DCREATED_DATE) 
     VALUES(var_ProcessStatusID,LOAN_REQ_ID,APPLICANT_ID,1,'CUST_APPROVAL_LOGIC_VALIDATE','NOT EXISTS',M_RULE_ID,NULL,NULL,'ERR16','Green channel account informations are not available',sysdate);
     COMMIT;
  END IF;

 END IF;

 record_history := 'NIC_AP = '||NIC||', APPLICANT_ID = '||APPLICANT_ID||', NIC_JB = '||NIC_JB||', APPLICANT_ID_JB = '||APPLICANT_ID_JB
                    ||', TC_VALUE = '||TC_VALUE||', DISPO_INCOME = '||DISPO_INCOME||', AP_IMAIN_IND = '||AP_IMAIN_IND
                    ||', AP_ISUB_IND = '||AP_ISUB_IND||', AP_IMAJOR_OCCU = '||AP_IMAJOR_OCCU||', AP_IMINOR_OCCU = '||AP_IMINOR_OCCU
                    ||', GROUP_RELATION = '||GROUP_RELATION||', SEC_ID = '||SEC_ID||', SUB_SEC_ID = '||SUB_SEC_ID
                    ||', JB_IMAIN_IND = '||JB_IMAIN_IND||', JB_ISUB_IND = '||JB_ISUB_IND||', JB_IMAJOR_OCCU = '||JB_IMAJOR_OCCU
                    ||', JB_IMINOR_OCCU = '||JB_IMINOR_OCCU||', O_PRODUCT = '||O_PRODUCT||', O_HEARDFROM = '||O_HEARDFROM||', GROUP_RELATION_COUNT = '||GROUP_RELATION_COUNT
                    ||', SECURITYTYPEID = '||SECURITYTYPEID||', CATEGORYID = '||CATEGORYID||', OWNERSHIPID = '||OWNERSHIPID||', MAINTYPEID = '||MAINTYPEID
                    ||', KYC = '||KYC||', JB_KYC = '||JB_KYC||', LOAN_REQ_AMOUNT = '||LOAN_REQ_AMOUNT||', TC_REQ_AMOUNT = '||TC_REQ_AMOUNT
                    ||', MAKE_V = '||MAKE_V||', MODEL_V = '||MODEL_V||', BOND_TYPE_R = '||BOND_TYPE_R||', PROP_TYPE_R = '||PROP_TYPE_R
                    ||', PLAN_D_P = '||PLAN_D_P||', PLAN_NO_D_P = '||PLAN_NO_D_P||', PLAN_D_G = '||PLAN_D_G||', PALN_NO_D_G = '||PALN_NO_D_G
                    ||', PLAN_D_DP = '||PLAN_D_DP||', PALN_NO_D_DP = '||PALN_NO_D_DP;

 INSERT INTO TBL_APVL_RULE_VALIDATE_HISTORY(IVALIDATION_SEQ,ILOAN_ID,VNIC,RELATION,VVALIDATION_TYPE,VRECORD_HISTORY,DCREATED_DATE) 
 VALUES(var_ProcessStatusID,LOAN_REQ_ID,NIC,1,'CUST_APPROVAL_LOGIC_VALIDATE',record_history,SYSDATE);
 COMMIT;

   EXCEPTION
    WHEN OTHERS THEN
    var_ErrorMessage := SUBSTR(SQLERRM, 1, 500);
            INSERT INTO tbl_xdp_error_log_db(logid, 
                                          itemname, 
                                          error_message, 
                                          postdatetime)
            VALUES( seq_xdp_error_log_db.NEXTVAL,
                    'Green channel information validation Stored Procedure XDP_P_CUST_APVL_LOGIC_VALIDATE',
                    DBMS_UTILITY.FORMAT_ERROR_BACKTRACE()||' - '||var_ErrorMessage,
                    sysdate);  

 END;

  BEGIN
    SELECT DISTINCT 2
    INTO STATUS_FAIL
    FROM xdp_t_validation_status
    WHERE VSTATUS IN ('FAIL','NOT EXISTS')
    AND IVALIDATION_SEQ = var_ProcessStatusID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        STATUS_FAIL := 0;
    END;

  BEGIN
    SELECT DISTINCT 1
    INTO STATUS_PASS
    FROM xdp_t_validation_status
    WHERE VSTATUS IN ('PASS','NOT USED')
    AND IVALIDATION_SEQ = var_ProcessStatusID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        STATUS_PASS := 0;
    END;


    IF STATUS_FAIL = 2 THEN
        STATUS := 2;
    ELSIF STATUS_PASS = 1 THEN
        STATUS := 1;
    ELSE
        STATUS := 1;
    END IF;

 VALIDATION_SEQ_ID := var_ProcessStatusID;
 FINAL_STATUS := STATUS;
END;